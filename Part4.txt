Set 7 Questions:

1.	The methods implemented in Critter are the act method, the getActors method (to receive the actors), the processActors method (to process the elements of the actors), the getMoveLocations method, and the selectMoveLocation method.

2.	The five basic actions of all critters when they act include getting an actor, processing the actor, getting the location in which to move, selecting the "move location", then moving to said location with processed actor.

3.	Subclasses should not override the getActors method as these subclasses do not declare separate getActors methods.

4.	A critter could process actors by analyzing instances of objects and other actors (obstacles), acting accordingly by removing itself from the grid, and it could also set its color to that of another object adjacent to it.

5.	In order to act, the critter must invoke the processActor method (to set its conditions), selectMoveLocation (to create a location to move to), and the makeMove method (to move there).

6.	There is no Critter constructor since the Critter relies on Actor.

Set 8 Questions:

1.	Act calls getActors, processActors, getMoveLocations, selectMoveLocation, and makeMove. ChameleonCritter overrides processActors and makeMove. Thus, act for ChameleonCritter has different behaviors than act for Critter

2.	makeMove of ChameleonCritter is called super.makeMove because makeMove by itself changes the direction of the critter to face its location. By calling super.makeMove, the ChameleonCritter actually makes the move

3.	By modifying makeMove to drop flowers in the old location. A variable keeps track of the current location, and the critter places flower only if the critter actually moved.

4.	ChameleonCritter does not define a new behavior for getActors, there is no need to override it.

5.	Actor class contains the getLocation method.

6.	A critter can access its grid by calling getGrid

Set 9 Questions:

1.	CrabCritter does not need to override processActors. It processes its actors by eating neighboring actors returned from getActors.

2.	CrabCritter's getActors only eats neighbors in front of itself, and its NE and NW locations. These neighbors are removed from the grid.

3.	This method is called to bring in an array of directions. This array contains the directions of "edible" candidates. The method uses this array to determine valid adjacent locations of the critter.

4.	(4,3), (4,4), and (4,5)

5.	Similarities: both randomly choose next location
	Differences: Crab critter will only move left or to its right.

6.	If loc in makeMove = current location, it turns instead.

7.	The processActors method only removes actors that are neither rocks nor critters. A CrabCritter cannot eat another critter.